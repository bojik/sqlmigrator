// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bojik/sqlmigrator/pkg/db (interfaces: DataKeeper)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	db "github.com/bojik/sqlmigrator/pkg/db"
	gomock "github.com/golang/mock/gomock"
)

// MockDataKeeper is a mock of DataKeeper interface.
type MockDataKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockDataKeeperMockRecorder
}

// MockDataKeeperMockRecorder is the mock recorder for MockDataKeeper.
type MockDataKeeperMockRecorder struct {
	mock *MockDataKeeper
}

// NewMockDataKeeper creates a new mock instance.
func NewMockDataKeeper(ctrl *gomock.Controller) *MockDataKeeper {
	mock := &MockDataKeeper{ctrl: ctrl}
	mock.recorder = &MockDataKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataKeeper) EXPECT() *MockDataKeeperMockRecorder {
	return m.recorder
}

// CreateMigratorTable mocks base method.
func (m *MockDataKeeper) CreateMigratorTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMigratorTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMigratorTable indicates an expected call of CreateMigratorTable.
func (mr *MockDataKeeperMockRecorder) CreateMigratorTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMigratorTable", reflect.TypeOf((*MockDataKeeper)(nil).CreateMigratorTable))
}

// ExecSql mocks base method.
func (m *MockDataKeeper) ExecSql(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecSql", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecSql indicates an expected call of ExecSql.
func (mr *MockDataKeeperMockRecorder) ExecSql(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSql", reflect.TypeOf((*MockDataKeeper)(nil).ExecSql), arg0)
}

// FindNewMigrations mocks base method.
func (m *MockDataKeeper) FindNewMigrations(arg0 []int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNewMigrations", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNewMigrations indicates an expected call of FindNewMigrations.
func (mr *MockDataKeeperMockRecorder) FindNewMigrations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNewMigrations", reflect.TypeOf((*MockDataKeeper)(nil).FindNewMigrations), arg0)
}

// SelectVersionRow mocks base method.
func (m *MockDataKeeper) SelectVersionRow(arg0 int) (db.VersionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectVersionRow", arg0)
	ret0, _ := ret[0].(db.VersionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectVersionRow indicates an expected call of SelectVersionRow.
func (mr *MockDataKeeperMockRecorder) SelectVersionRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectVersionRow", reflect.TypeOf((*MockDataKeeper)(nil).SelectVersionRow), arg0)
}
