// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bojik/sqlmigrator/pkg/db (interfaces: VersionRow)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	db "github.com/bojik/sqlmigrator/pkg/db"
	gomock "github.com/golang/mock/gomock"
)

// MockVersionRow is a mock of VersionRow interface.
type MockVersionRow struct {
	ctrl     *gomock.Controller
	recorder *MockVersionRowMockRecorder
}

// MockVersionRowMockRecorder is the mock recorder for MockVersionRow.
type MockVersionRowMockRecorder struct {
	mock *MockVersionRow
}

// NewMockVersionRow creates a new mock instance.
func NewMockVersionRow(ctrl *gomock.Controller) *MockVersionRow {
	mock := &MockVersionRow{ctrl: ctrl}
	mock.recorder = &MockVersionRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionRow) EXPECT() *MockVersionRowMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockVersionRow) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockVersionRowMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockVersionRow)(nil).Close))
}

// Commit mocks base method.
func (m *MockVersionRow) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockVersionRowMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockVersionRow)(nil).Commit))
}

// CommitError mocks base method.
func (m *MockVersionRow) CommitError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitError")
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitError indicates an expected call of CommitError.
func (mr *MockVersionRowMockRecorder) CommitError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitError", reflect.TypeOf((*MockVersionRow)(nil).CommitError))
}

// CommitSuccess mocks base method.
func (m *MockVersionRow) CommitSuccess() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitSuccess")
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitSuccess indicates an expected call of CommitSuccess.
func (mr *MockVersionRowMockRecorder) CommitSuccess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitSuccess", reflect.TypeOf((*MockVersionRow)(nil).CommitSuccess))
}

// Insert mocks base method.
func (m *MockVersionRow) Insert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockVersionRowMockRecorder) Insert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVersionRow)(nil).Insert))
}

// SetStatus mocks base method.
func (m *MockVersionRow) SetStatus(arg0 db.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockVersionRowMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockVersionRow)(nil).SetStatus), arg0)
}
